/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/fS1ZRskWbGw
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { DM_Sans } from 'next/font/google'

dm_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client';

import { useState, useCallback } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

export function PodcastCreator() {
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const router = useRouter();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFile(event.target.files ? event.target.files[0] : null);
  };

  const handleDrag = useCallback((e: React.DragEvent<HTMLFormElement | HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent<HTMLFormElement | HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  }, []);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!file) return;

    setLoading(true);

    const reader = new FileReader();
    reader.onload = async (e) => {
      const text = e.target?.result as string;

      try {
        const response = await fetch('/api/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            article: text
          }),
        });

        const data = await response.json();
        if (response.ok) {
          const audioUrl = data.audioUrl;
          router.push(`/success?audioUrl=${encodeURIComponent(audioUrl)}`);
        } else {
          console.error(data.error);
        }
      } catch (error) {
        console.error('Failed to generate podcast:', error);
      } finally {
        setLoading(false);
      }
    };
    reader.readAsText(file);
  };

  return (
    <div className="flex flex-col min-h-[100dvh]">
      <header className="bg-background border-b px-4 md:px-6 h-14 flex items-center justify-between">
        <Link href="#" className="flex items-center" prefetch={false}>
          <PodcastIcon className="h-6 w-6 mr-2" />
          <span className="text-lg font-semibold">Podcast Generator</span>
        </Link>
        <nav className="hidden md:flex gap-4">
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            Home
          </Link>
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            About
          </Link>
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            Contact
          </Link>
        </nav>
      </header>
      <main className="flex-1 flex flex-col items-center justify-center px-4 md:px-6 py-12 md:py-24">
        <div className="max-w-xl w-full space-y-6">
          <div className="text-center">
            <h1 className="text-3xl md:text-4xl font-bold">Convert Your Text to Podcast</h1>
            <p className="mt-2 text-muted-foreground">
              Upload your text content and we'll generate a professional podcast episode for you.
            </p>
          </div>
          <Card>
            <CardHeader>
              <CardTitle>Upload Your Text</CardTitle>
              <CardDescription>Drag and drop your file or click to select.</CardDescription>
            </CardHeader>
            <CardContent>
              <form
                onSubmit={handleSubmit}
                onDragEnter={handleDrag}
                className="flex flex-col items-center justify-center gap-4 py-12 border-2 border-dashed border-muted rounded-md"
              >
                <div
                  className={`w-full h-full flex flex-col items-center justify-center ${dragActive ? 'bg-muted' : ''}`}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={handleDrop}
                >
                  <UploadIcon className="h-12 w-12 text-muted-foreground" />
                  <p className="text-muted-foreground">
                    Drag and drop your file here or{" "}
                    <Button variant="link" className="underline" onClick={() => document.getElementById('fileInput')?.click()}>
                      click to upload
                    </Button>
                  </p>
                  <input
                    type="file"
                    id="fileInput"
                    className="hidden"
                    onChange={handleFileChange}
                    accept=".txt,.doc,.docx,.pdf"
                  />
                  {file && <p className="mt-2">Selected file: {file.name}</p>}
                </div>
                <Button type="submit" disabled={loading || !file}>
                  {loading ? 'Generating...' : 'Generate Podcast'}
                </Button>
              </form>
            </CardContent>
          </Card>
          <div className="text-center">
            <p className="text-muted-foreground">Your podcast will be available for download once it's ready.</p>
          </div>
        </div>
      </main>
      <footer className="bg-muted px-4 md:px-6 py-6 flex flex-col md:flex-row items-center justify-between">
        <p className="text-sm text-muted-foreground">&copy; 2024 Podcast Generator. All rights reserved.</p>
        <div className="flex gap-4 mt-4 md:mt-0">
          <Link href="#" className="text-sm hover:underline" prefetch={false}>
            Privacy Policy
          </Link>
          <Link href="#" className="text-sm hover:underline" prefetch={false}>
            Terms of Service
          </Link>
          <Link href="#" className="text-sm hover:underline" prefetch={false}>
            Contact Us
          </Link>
        </div>
      </footer>
    </div>
  );
}

function PodcastIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16.85 18.58a9 9 0 1 0-9.7 0" />
      <path d="M8 14a5 5 0 1 1 8 0" />
      <circle cx="12" cy="11" r="1" />
      <path d="M13 17a1 1 0 1 0-2 0l.5 4.5a.5.5 0 1 0 1 0Z" />
    </svg>
  );
}

function UploadIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="7 10 12 15 17 10" />
      <line x1="12" x2="12" y1="15" y2="3" />
    </svg>
  );
}
